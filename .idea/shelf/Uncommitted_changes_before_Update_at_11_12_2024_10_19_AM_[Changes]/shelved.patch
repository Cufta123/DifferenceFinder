Index: src/main/java/org/example/ComparingFiles.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Comparator;\r\nimport java.util.logging.Logger;\r\n\r\npublic class ComparingFiles {\r\n    private static final Logger logger = Logger.getLogger(ComparingFiles.class.getName());\r\n    private static final List<MatchedRecord> matchedRecordsList = new ArrayList<>();\r\n    private static final List<FlixBusRecord> unmatchedFlixbusList = new ArrayList<>(); // Declare unmatchedFlixbusList\r\n    private static final List<ESPRecord> unmatchedESPList = new ArrayList<>(); // Declare unmatchedESPList\r\n\r\n\r\n    public static String compareFiles(List<ESPRecord> espRecords, List<Record> flixbusRecords, List<Record> feeRecords) {\r\n        StringBuilder result = new StringBuilder();\r\n        try {\r\n            List<ESPRecord> combinedESPList = combineESPRecords(espRecords);\r\n            List<FlixBusRecord> combinedFlixbusList = combineFlixBusRecords(flixbusRecords);\r\n            List<FeeRecord> combinedFlixBusFeeRecords = combineFlixBusFeeRecords(flixbusRecords);\r\n\r\n            sortRecords(combinedESPList, combinedFlixbusList);\r\n\r\n            // Generate summary\r\n            result.append(generateSummary(combinedESPList, combinedFlixbusList, combinedFlixBusFeeRecords));\r\n\r\n            // Perform matching logic\r\n            compareRecords(combinedESPList, combinedFlixbusList);\r\n\r\n            // Matched records list\r\n            result.append(formatRecordsList());\r\n\r\n\r\n        } catch (Exception e) {\r\n            logger.severe(\"An error occurred while comparing files: \" + e.getMessage());\r\n            e.printStackTrace();\r\n        }\r\n        return result.toString();\r\n    }\r\n\r\n    private static String generateSummary(List<ESPRecord> combinedESPList, List<FlixBusRecord> combinedFlixbusList, List<FeeRecord> combinedFlixBusFeeRecords) {\r\n        double espTotalAmount = combinedESPList.stream().mapToDouble(ESPRecord::getAmount).sum();\r\n        double suplierMarginTotalAmount = combinedESPList.stream().mapToDouble(ESPRecord::getSuplierMargin).sum();\r\n        double flixbusTotalCash = combinedFlixbusList.stream().mapToDouble(FlixBusRecord::getCash).sum();\r\n        double absoluteDifference = Math.abs(espTotalAmount - flixbusTotalCash);\r\n        double totalComm_gross = combinedFlixbusList.stream().mapToDouble(FlixBusRecord::getComm_gross).sum();\r\n        double commGrossSupplierMarginDiff = Math.abs(totalComm_gross - suplierMarginTotalAmount);\r\n        double combinedESPListTotalAmount = combinedESPList.stream().mapToDouble(ESPRecord::getTotalAmount).sum();\r\n        double combinedFlixBusListTotalAmount = getFlixBusTotalAmount(combinedFlixbusList,combinedFlixBusFeeRecords);\r\n       double TotalAmountDifference = Math.abs(combinedESPListTotalAmount - combinedFlixBusListTotalAmount);\r\n        return String.format(\"ESP summary:     %.2f  |   Suplier Margin:   %.3f  |   ESP Total Amount: %.2f%n\" +\r\n                        \"Flixbus summary: %.2f  |   Total Comm_gross: %.3f |  Flixbus Total Amount: %.2f%n\" +\r\n                        \"Difference:      %.2f    |   Difference:       %.3f  |   Difference: %.2f%n\",\r\n                espTotalAmount, suplierMarginTotalAmount,combinedESPListTotalAmount, flixbusTotalCash, totalComm_gross,combinedFlixBusListTotalAmount ,absoluteDifference, commGrossSupplierMarginDiff,TotalAmountDifference);\r\n    }\r\n    public static String printServiceFee(List<ESPRecord> espRecords, List<Record> feeRecords) {\r\n        StringBuilder result = new StringBuilder();\r\n        result.append(String.format(\"%n%-20s | %-15s | %-10s%n\", \"FlixBus Booking Number\", \"Trip Services\", \"Cash\"));\r\n\r\n        List<ESPRecord> combinedESPList = combineESPRecords(espRecords);\r\n        List<FlixBusRecord> combinedFlixbusList = combineFlixBusRecords(feeRecords);\r\n\r\n        sortRecords(combinedESPList, combinedFlixbusList);\r\n\r\n        result.append(printServiceFeeComparison(combinedESPList, combinedFlixbusList));\r\n        return result.toString();\r\n    }\r\n\r\n    private static List<FlixBusRecord> combineFlixBusRecords(List<Record> flixbusRecords) {\r\n        Map<String, FlixBusRecord> combinedFlixBusRecords = new HashMap<>();\r\n        for (Record record : flixbusRecords) {\r\n            if (record instanceof FlixBusRecord flixBusRecord) {\r\n                combinedFlixBusRecords.merge(flixBusRecord.getBookingNumber(), flixBusRecord, (existing, newRecord) ->\r\n                        new FlixBusRecord(\r\n                                existing.getBookingNumber(),\r\n                                existing.getTripServices(),\r\n                                existing.getCash() + newRecord.getCash(),\r\n                                existing.getVoucher() + newRecord.getVoucher(), // Sum up voucher\r\n                                existing.getPaymentType(),\r\n                                existing.getComm_gross() + newRecord.getComm_gross(), // Sum up comm_gross\r\n                                existing.getTotalAmount() + newRecord.getTotalAmount()\r\n                        ));\r\n            }\r\n\r\n        }\r\n        return new ArrayList<>(combinedFlixBusRecords.values());\r\n    }\r\n    public static double getFlixBusTotalAmount(List<FlixBusRecord> flixbusRecords, List<FeeRecord> feeRecords) {\r\n        return flixbusRecords.stream().mapToDouble(FlixBusRecord::getTotalAmount).sum()\r\n                + feeRecords.stream().mapToDouble(FeeRecord::getFeeAmount).sum();\r\n    }\r\n    private static List<FeeRecord> combineFlixBusFeeRecords(List<Record> feeRecords){\r\n        Map<String, FeeRecord> combinedFlixBusFeeRecords = new HashMap<>();\r\n        for (Record record : feeRecords) {\r\n            if (record instanceof FeeRecord feeRecord) {\r\n                combinedFlixBusFeeRecords.merge(feeRecord.getBookingNumber(), feeRecord, (existing, newRecord) ->\r\n                        new FeeRecord(\r\n                                existing.getBookingNumber(),\r\n                                existing.getFeeAmount() + newRecord.getFeeAmount()\r\n                        ));\r\n            }\r\n        }\r\n        return new ArrayList<>(combinedFlixBusFeeRecords.values());\r\n    }\r\n\r\n\r\n    private static List<ESPRecord> combineESPRecords(List<ESPRecord> espRecords) {\r\n        Map<String, ESPRecord> combinedESPRecords = new HashMap<>();\r\n        for (ESPRecord record : espRecords) {\r\n            combinedESPRecords.merge(record.getSerialNumber(), record, (existing, newRecord) ->\r\n                    new ESPRecord(\r\n                            existing.getSerialNumber(),\r\n                            existing.getAmount() + newRecord.getAmount(),\r\n                            existing.getSuplierMargin() + newRecord.getSuplierMargin(),\r\n                            existing.getSuplierMargin() + newRecord.getSuplierMargin() // Correctly sum the suplierMargin\r\n                    ));\r\n        }\r\n        return new ArrayList<>(combinedESPRecords.values());\r\n    }\r\n\r\n    private static void sortRecords(List<ESPRecord> espRecords, List<FlixBusRecord> flixbusRecords) {\r\n        espRecords.sort(Comparator.comparing(ESPRecord::getSerialNumber));\r\n        flixbusRecords.sort(Comparator.comparing(FlixBusRecord::getBookingNumber));\r\n    }\r\n\r\n    private static void compareRecords(List<ESPRecord> espRecords, List<FlixBusRecord> flixbusRecords) {\r\n        unmatchedFlixbusList.clear();\r\n        unmatchedESPList.clear();\r\n        matchedRecordsList.clear();\r\n\r\n        int maxSize = Math.max(espRecords.size(), flixbusRecords.size());\r\n        for (int i = 0; i < maxSize; i++) {\r\n            String espSerial = i < espRecords.size() ? formatSerialNumber(espRecords.get(i).getSerialNumber()) : \"N/A\";\r\n            String espAmount = i < espRecords.size() ? String.format(\"%.2f\", espRecords.get(i).getAmount()) : \"N/A\";\r\n            String flixbusSerial = i < flixbusRecords.size() ? formatSerialNumber(flixbusRecords.get(i).getBookingNumber()) : \"N/A\";\r\n            String flixbusCash = i < flixbusRecords.size() ? String.format(\"%.2f\", flixbusRecords.get(i).getCash()) : \"N/A\";\r\n            String paymentType = i < flixbusRecords.size() ? flixbusRecords.get(i).getPaymentType() : \"N/A\";\r\n            String match = (espSerial.equals(flixbusSerial) && espAmount.equals(flixbusCash)) ? \"Yes\" : \"No\";\r\n\r\n\r\n            if (!espSerial.equals(flixbusSerial) && i < flixbusRecords.size()) {\r\n                unmatchedFlixbusList.add(flixbusRecords.remove(i));\r\n                i--; // Adjust the index after removal\r\n            } else if (!espSerial.equals(\"N/A\") || !flixbusSerial.equals(\"N/A\")) {\r\n                if (match.equals(\"Yes\")) {\r\n                    matchedRecordsList.add(new MatchedRecord(espRecords.get(i), flixbusRecords.get(i)));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private static String formatRecordsList() {\r\n        StringBuilder result = new StringBuilder();\r\n        result.append(\"Matched Records:\\n\");\r\n        result.append(String.format(\"%-20s | %-10s | %-20s|%-20s | %-10s | %-10s%n\", \"ESP Serial\", \"ESP Amount\",\"Total Amount\", \"Booking Number\", \"Cash\", \"Cash Equal\"));\r\n        for (MatchedRecord record : matchedRecordsList) {\r\n            ESPRecord espRecord = record.getEspRecord();\r\n            FlixBusRecord flixBusRecord = record.getFlixBusRecord();\r\n            String formattedBookingNumber = new java.math.BigDecimal(flixBusRecord.getBookingNumber()).toPlainString();\r\n            String cashEqual = String.format(\"%.2f\", espRecord.getAmount()).equals(String.format(\"%.2f\", flixBusRecord.getCash())) ? \"Equal\" : \"Not Equal\";\r\n            result.append(String.format(\"%-20s | %-10.2f | %-20.2f |%-20s| %-10.2f | %-10s%n\",\r\n                    espRecord.getSerialNumber(), espRecord.getAmount(),espRecord.getTotalAmount() ,formattedBookingNumber, flixBusRecord.getCash(), cashEqual));\r\n        }\r\n        result.append(\"\\nUnmatched FlixBus Records:\\n\");\r\n        for (FlixBusRecord record : unmatchedFlixbusList) {\r\n            String formattedBookingNumber = new java.math.BigDecimal(record.getBookingNumber()).toPlainString();\r\n            result.append(String.format(\"%-20s | %-10.2f%n\", formattedBookingNumber, record.getCash()));\r\n        }\r\n        result.append(\"\\nUnmatched ESP Records:\\n\");\r\n        for (ESPRecord record : unmatchedESPList) {\r\n            result.append(String.format(\"%-20s | %-10.2f%n\", record.getSerialNumber(), record.getAmount()));\r\n        }\r\n        return result.toString();\r\n    }\r\n    private static String printServiceFeeComparison(List<ESPRecord> espRecords, List<FlixBusRecord> flixbusRecords) {\r\n        StringBuilder result = new StringBuilder();\r\n        List<FlixBusRecord> unmatchedFlixbusList = new ArrayList<>();\r\n        matchedRecordsList.clear();\r\n\r\n        int maxSize = Math.max(espRecords.size(), flixbusRecords.size());\r\n        for (int i = 0; i < maxSize; i++) {\r\n            String espSerial = i < espRecords.size() ? formatSerialNumber(espRecords.get(i).getSerialNumber()) : \"N/A\";\r\n            String flixbusSerial = i < flixbusRecords.size() ? formatSerialNumber(flixbusRecords.get(i).getBookingNumber()) : \"N/A\";\r\n            String tripServices = i < flixbusRecords.size() ? flixbusRecords.get(i).getTripServices() : \"N/A\";\r\n            double cash = i < flixbusRecords.size() ? flixbusRecords.get(i).getCash() : 0.0;\r\n            double voucher = i < flixbusRecords.size() ? flixbusRecords.get(i).getVoucher() : 0.0;\r\n            String paymentType = i < flixbusRecords.size() ? flixbusRecords.get(i).getPaymentType() : \"N/A\";\r\n            String match = espSerial.equals(flixbusSerial) ? \"Yes\" : \"No\";\r\n\r\n            if (!espSerial.equals(flixbusSerial) && i < flixbusRecords.size()) {\r\n                unmatchedFlixbusList.add(flixbusRecords.remove(i));\r\n                i--; // Adjust the index after removal\r\n            } else if (!espSerial.equals(\"N/A\") || !flixbusSerial.equals(\"N/A\")) {\r\n                if (match.equals(\"Yes\")) {\r\n                    matchedRecordsList.add(new MatchedRecord(espRecords.get(i), flixbusRecords.get(i)));\r\n                }\r\n                result.append(String.format(\"%s | %s | %s | %.2f | %.2f | %s | %s%n\", espSerial, flixbusSerial, tripServices, cash, voucher, paymentType, match));\r\n            }\r\n        }\r\n\r\n        for (FlixBusRecord record : unmatchedFlixbusList) {\r\n            String flixbusSerial = formatSerialNumber(record.getBookingNumber());\r\n            String tripServices = record.getTripServices();\r\n            double cash = record.getCash();\r\n            result.append(String.format(\"%-21s | %-15s | %.2f%n\", flixbusSerial, tripServices, cash));\r\n        }\r\n        return result.toString();\r\n    }\r\n\r\n    private static String formatSerialNumber(String serialNumber) {\r\n        try {\r\n            return new java.math.BigDecimal(serialNumber).toPlainString();\r\n        } catch (NumberFormatException e) {\r\n            return serialNumber;\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/ComparingFiles.java b/src/main/java/org/example/ComparingFiles.java
--- a/src/main/java/org/example/ComparingFiles.java	(revision 9b410dd66f99912275f1a9e3b7caf63e5c7011ab)
+++ b/src/main/java/org/example/ComparingFiles.java	(date 1731403102542)
@@ -158,14 +158,14 @@
         for (MatchedRecord record : matchedRecordsList) {
             ESPRecord espRecord = record.getEspRecord();
             FlixBusRecord flixBusRecord = record.getFlixBusRecord();
-            String formattedBookingNumber = new java.math.BigDecimal(flixBusRecord.getBookingNumber()).toPlainString();
+            String formattedBookingNumber = formatBookingNumber(flixBusRecord.getBookingNumber());
             String cashEqual = String.format("%.2f", espRecord.getAmount()).equals(String.format("%.2f", flixBusRecord.getCash())) ? "Equal" : "Not Equal";
             result.append(String.format("%-20s | %-10.2f | %-20.2f |%-20s| %-10.2f | %-10s%n",
                     espRecord.getSerialNumber(), espRecord.getAmount(),espRecord.getTotalAmount() ,formattedBookingNumber, flixBusRecord.getCash(), cashEqual));
         }
         result.append("\nUnmatched FlixBus Records:\n");
         for (FlixBusRecord record : unmatchedFlixbusList) {
-            String formattedBookingNumber = new java.math.BigDecimal(record.getBookingNumber()).toPlainString();
+            String formattedBookingNumber = formatBookingNumber(record.getBookingNumber());
             result.append(String.format("%-20s | %-10.2f%n", formattedBookingNumber, record.getCash()));
         }
         result.append("\nUnmatched ESP Records:\n");
@@ -208,7 +208,13 @@
         }
         return result.toString();
     }
-
+    private static String formatBookingNumber(String bookingNumber) {
+        try {
+            return new java.math.BigDecimal(bookingNumber).toPlainString();
+        } catch (NumberFormatException e) {
+            return bookingNumber;
+        }
+    }
     private static String formatSerialNumber(String serialNumber) {
         try {
             return new java.math.BigDecimal(serialNumber).toPlainString();
